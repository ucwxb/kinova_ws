// Generated by gencpp from file kortex_driver/TrajectoryInfo.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_TRAJECTORYINFO_H
#define KORTEX_DRIVER_MESSAGE_TRAJECTORYINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kortex_driver
{
template <class ContainerAllocator>
struct TrajectoryInfo_
{
  typedef TrajectoryInfo_<ContainerAllocator> Type;

  TrajectoryInfo_()
    : trajectory_info_type(0)
    , waypoint_index(0)
    , joint_index(0)  {
    }
  TrajectoryInfo_(const ContainerAllocator& _alloc)
    : trajectory_info_type(0)
    , waypoint_index(0)
    , joint_index(0)  {
  (void)_alloc;
    }



   typedef uint32_t _trajectory_info_type_type;
  _trajectory_info_type_type trajectory_info_type;

   typedef uint32_t _waypoint_index_type;
  _waypoint_index_type waypoint_index;

   typedef uint32_t _joint_index_type;
  _joint_index_type joint_index;





  typedef boost::shared_ptr< ::kortex_driver::TrajectoryInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::TrajectoryInfo_<ContainerAllocator> const> ConstPtr;

}; // struct TrajectoryInfo_

typedef ::kortex_driver::TrajectoryInfo_<std::allocator<void> > TrajectoryInfo;

typedef boost::shared_ptr< ::kortex_driver::TrajectoryInfo > TrajectoryInfoPtr;
typedef boost::shared_ptr< ::kortex_driver::TrajectoryInfo const> TrajectoryInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::TrajectoryInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::TrajectoryInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kortex_driver::TrajectoryInfo_<ContainerAllocator1> & lhs, const ::kortex_driver::TrajectoryInfo_<ContainerAllocator2> & rhs)
{
  return lhs.trajectory_info_type == rhs.trajectory_info_type &&
    lhs.waypoint_index == rhs.waypoint_index &&
    lhs.joint_index == rhs.joint_index;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kortex_driver::TrajectoryInfo_<ContainerAllocator1> & lhs, const ::kortex_driver::TrajectoryInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::TrajectoryInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::TrajectoryInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::TrajectoryInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::TrajectoryInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::TrajectoryInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::TrajectoryInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::TrajectoryInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0eff35f5790d1aa2c620bfca263340d6";
  }

  static const char* value(const ::kortex_driver::TrajectoryInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0eff35f5790d1aa2ULL;
  static const uint64_t static_value2 = 0xc620bfca263340d6ULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::TrajectoryInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/TrajectoryInfo";
  }

  static const char* value(const ::kortex_driver::TrajectoryInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::TrajectoryInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"uint32 trajectory_info_type\n"
"uint32 waypoint_index\n"
"uint32 joint_index\n"
;
  }

  static const char* value(const ::kortex_driver::TrajectoryInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::TrajectoryInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.trajectory_info_type);
      stream.next(m.waypoint_index);
      stream.next(m.joint_index);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrajectoryInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::TrajectoryInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kortex_driver::TrajectoryInfo_<ContainerAllocator>& v)
  {
    s << indent << "trajectory_info_type: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.trajectory_info_type);
    s << indent << "waypoint_index: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.waypoint_index);
    s << indent << "joint_index: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.joint_index);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_TRAJECTORYINFO_H

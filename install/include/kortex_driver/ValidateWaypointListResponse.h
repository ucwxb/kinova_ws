// Generated by gencpp from file kortex_driver/ValidateWaypointListResponse.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_VALIDATEWAYPOINTLISTRESPONSE_H
#define KORTEX_DRIVER_MESSAGE_VALIDATEWAYPOINTLISTRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <kortex_driver/WaypointValidationReport.h>

namespace kortex_driver
{
template <class ContainerAllocator>
struct ValidateWaypointListResponse_
{
  typedef ValidateWaypointListResponse_<ContainerAllocator> Type;

  ValidateWaypointListResponse_()
    : output()  {
    }
  ValidateWaypointListResponse_(const ContainerAllocator& _alloc)
    : output(_alloc)  {
  (void)_alloc;
    }



   typedef  ::kortex_driver::WaypointValidationReport_<ContainerAllocator>  _output_type;
  _output_type output;





  typedef boost::shared_ptr< ::kortex_driver::ValidateWaypointListResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::ValidateWaypointListResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ValidateWaypointListResponse_

typedef ::kortex_driver::ValidateWaypointListResponse_<std::allocator<void> > ValidateWaypointListResponse;

typedef boost::shared_ptr< ::kortex_driver::ValidateWaypointListResponse > ValidateWaypointListResponsePtr;
typedef boost::shared_ptr< ::kortex_driver::ValidateWaypointListResponse const> ValidateWaypointListResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::ValidateWaypointListResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::ValidateWaypointListResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kortex_driver::ValidateWaypointListResponse_<ContainerAllocator1> & lhs, const ::kortex_driver::ValidateWaypointListResponse_<ContainerAllocator2> & rhs)
{
  return lhs.output == rhs.output;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kortex_driver::ValidateWaypointListResponse_<ContainerAllocator1> & lhs, const ::kortex_driver::ValidateWaypointListResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::ValidateWaypointListResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::ValidateWaypointListResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::ValidateWaypointListResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::ValidateWaypointListResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::ValidateWaypointListResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::ValidateWaypointListResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::ValidateWaypointListResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6ab2f9c51d3b9ba949e1dea76a321fca";
  }

  static const char* value(const ::kortex_driver::ValidateWaypointListResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6ab2f9c51d3b9ba9ULL;
  static const uint64_t static_value2 = 0x49e1dea76a321fcaULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::ValidateWaypointListResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/ValidateWaypointListResponse";
  }

  static const char* value(const ::kortex_driver::ValidateWaypointListResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::ValidateWaypointListResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "WaypointValidationReport output\n"
"\n"
"================================================================================\n"
"MSG: kortex_driver/WaypointValidationReport\n"
"\n"
"TrajectoryErrorReport trajectory_error_report\n"
"WaypointList optimal_waypoint_list\n"
"================================================================================\n"
"MSG: kortex_driver/TrajectoryErrorReport\n"
"\n"
"TrajectoryErrorElement[] trajectory_error_elements\n"
"================================================================================\n"
"MSG: kortex_driver/TrajectoryErrorElement\n"
"\n"
"uint32 error_type\n"
"uint32 error_identifier\n"
"float32 error_value\n"
"float32 min_value\n"
"float32 max_value\n"
"uint32 index\n"
"string message\n"
"uint32 waypoint_index\n"
"================================================================================\n"
"MSG: kortex_driver/WaypointList\n"
"\n"
"Waypoint[] waypoints\n"
"float32 duration\n"
"bool use_optimal_blending\n"
"================================================================================\n"
"MSG: kortex_driver/Waypoint\n"
"\n"
"string name\n"
"Waypoint_type_of_waypoint oneof_type_of_waypoint\n"
"================================================================================\n"
"MSG: kortex_driver/Waypoint_type_of_waypoint\n"
"\n"
"AngularWaypoint[] angular_waypoint\n"
"CartesianWaypoint[] cartesian_waypoint\n"
"================================================================================\n"
"MSG: kortex_driver/AngularWaypoint\n"
"\n"
"float32[] angles\n"
"float32[] maximum_velocities\n"
"float32 duration\n"
"================================================================================\n"
"MSG: kortex_driver/CartesianWaypoint\n"
"\n"
"Pose pose\n"
"uint32 reference_frame\n"
"float32 maximum_linear_velocity\n"
"float32 maximum_angular_velocity\n"
"float32 blending_radius\n"
"================================================================================\n"
"MSG: kortex_driver/Pose\n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"float32 theta_x\n"
"float32 theta_y\n"
"float32 theta_z\n"
;
  }

  static const char* value(const ::kortex_driver::ValidateWaypointListResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::ValidateWaypointListResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.output);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ValidateWaypointListResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::ValidateWaypointListResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kortex_driver::ValidateWaypointListResponse_<ContainerAllocator>& v)
  {
    s << indent << "output: ";
    s << std::endl;
    Printer< ::kortex_driver::WaypointValidationReport_<ContainerAllocator> >::stream(s, indent + "  ", v.output);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_VALIDATEWAYPOINTLISTRESPONSE_H

// Generated by gencpp from file kortex_driver/TrajectoryErrorType.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_TRAJECTORYERRORTYPE_H
#define KORTEX_DRIVER_MESSAGE_TRAJECTORYERRORTYPE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kortex_driver
{
template <class ContainerAllocator>
struct TrajectoryErrorType_
{
  typedef TrajectoryErrorType_<ContainerAllocator> Type;

  TrajectoryErrorType_()
    {
    }
  TrajectoryErrorType_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }





// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(TRAJECTORY_ERROR_TYPE_UNSPECIFIED)
  #undef TRAJECTORY_ERROR_TYPE_UNSPECIFIED
#endif
#if defined(_WIN32) && defined(TRAJECTORY_ERROR_TYPE_OUTSIDE_WORKSPACE)
  #undef TRAJECTORY_ERROR_TYPE_OUTSIDE_WORKSPACE
#endif
#if defined(_WIN32) && defined(TRAJECTORY_ERROR_TYPE_ACTUATOR_COUNT_MISMATCH)
  #undef TRAJECTORY_ERROR_TYPE_ACTUATOR_COUNT_MISMATCH
#endif
#if defined(_WIN32) && defined(TRAJECTORY_ERROR_TYPE_INVALID_DURATION)
  #undef TRAJECTORY_ERROR_TYPE_INVALID_DURATION
#endif
#if defined(_WIN32) && defined(TRAJECTORY_ERROR_TYPE_JOINT_NO_MOTION)
  #undef TRAJECTORY_ERROR_TYPE_JOINT_NO_MOTION
#endif
#if defined(_WIN32) && defined(TRAJECTORY_ERROR_TYPE_ZERO_DISTANCE)
  #undef TRAJECTORY_ERROR_TYPE_ZERO_DISTANCE
#endif
#if defined(_WIN32) && defined(TRAJECTORY_ERROR_TYPE_INVALID_JOINT_SPEED)
  #undef TRAJECTORY_ERROR_TYPE_INVALID_JOINT_SPEED
#endif
#if defined(_WIN32) && defined(TRAJECTORY_ERROR_TYPE_INVALID_SPEED)
  #undef TRAJECTORY_ERROR_TYPE_INVALID_SPEED
#endif
#if defined(_WIN32) && defined(TRAJECTORY_ERROR_TYPE_LARGE_SPEED)
  #undef TRAJECTORY_ERROR_TYPE_LARGE_SPEED
#endif
#if defined(_WIN32) && defined(TRAJECTORY_ERROR_TYPE_INVALID_JOINT_ACCELERATION)
  #undef TRAJECTORY_ERROR_TYPE_INVALID_JOINT_ACCELERATION
#endif
#if defined(_WIN32) && defined(TRAJECTORY_ERROR_TYPE_INVALID_ACCELERATION)
  #undef TRAJECTORY_ERROR_TYPE_INVALID_ACCELERATION
#endif
#if defined(_WIN32) && defined(TRAJECTORY_ERROR_TYPE_INVALID_TIME_STEP)
  #undef TRAJECTORY_ERROR_TYPE_INVALID_TIME_STEP
#endif
#if defined(_WIN32) && defined(TRAJECTORY_ERROR_TYPE_INVALID_TRAJECTORY_SIZE)
  #undef TRAJECTORY_ERROR_TYPE_INVALID_TRAJECTORY_SIZE
#endif
#if defined(_WIN32) && defined(TRAJECTORY_ERROR_TYPE_LARGE_SIZE)
  #undef TRAJECTORY_ERROR_TYPE_LARGE_SIZE
#endif
#if defined(_WIN32) && defined(TRAJECTORY_ERROR_TYPE_WRONG_MODE)
  #undef TRAJECTORY_ERROR_TYPE_WRONG_MODE
#endif
#if defined(_WIN32) && defined(TRAJECTORY_ERROR_TYPE_INVALID_JOINT_POSITION)
  #undef TRAJECTORY_ERROR_TYPE_INVALID_JOINT_POSITION
#endif
#if defined(_WIN32) && defined(TRAJECTORY_ERROR_TYPE_JOINT_POSITION_LIMIT)
  #undef TRAJECTORY_ERROR_TYPE_JOINT_POSITION_LIMIT
#endif
#if defined(_WIN32) && defined(TRAJECTORY_ERROR_TYPE_FILE_ERROR)
  #undef TRAJECTORY_ERROR_TYPE_FILE_ERROR
#endif
#if defined(_WIN32) && defined(TRAJECTORY_ERROR_TYPE_NO_FILE_IN_MEMORY)
  #undef TRAJECTORY_ERROR_TYPE_NO_FILE_IN_MEMORY
#endif
#if defined(_WIN32) && defined(TRAJECTORY_ERROR_TYPE_INDEX_OUT_OF_TRAJ)
  #undef TRAJECTORY_ERROR_TYPE_INDEX_OUT_OF_TRAJ
#endif
#if defined(_WIN32) && defined(TRAJECTORY_ERROR_TYPE_TRAJECTORY_ALREADY_RUNNING)
  #undef TRAJECTORY_ERROR_TYPE_TRAJECTORY_ALREADY_RUNNING
#endif
#if defined(_WIN32) && defined(TRAJECTORY_ERROR_TYPE_ALREADY_RUNNING)
  #undef TRAJECTORY_ERROR_TYPE_ALREADY_RUNNING
#endif
#if defined(_WIN32) && defined(TRAJECTORY_ERROR_TYPE_WRONG_STARTING_POINT)
  #undef TRAJECTORY_ERROR_TYPE_WRONG_STARTING_POINT
#endif
#if defined(_WIN32) && defined(TRAJECTORY_ERROR_TYPE_CARTESIAN_CANNOT_START)
  #undef TRAJECTORY_ERROR_TYPE_CARTESIAN_CANNOT_START
#endif
#if defined(_WIN32) && defined(TRAJECTORY_ERROR_TYPE_WRONG_STARTING_SPEED)
  #undef TRAJECTORY_ERROR_TYPE_WRONG_STARTING_SPEED
#endif
#if defined(_WIN32) && defined(TRAJECTORY_ERROR_TYPE_INVALID_POSITION)
  #undef TRAJECTORY_ERROR_TYPE_INVALID_POSITION
#endif
#if defined(_WIN32) && defined(TRAJECTORY_ERROR_TYPE_INVALID_CARTESIAN_POSITION)
  #undef TRAJECTORY_ERROR_TYPE_INVALID_CARTESIAN_POSITION
#endif
#if defined(_WIN32) && defined(TRAJECTORY_ERROR_TYPE_INVALID_CARTESIAN_ORIENTATION)
  #undef TRAJECTORY_ERROR_TYPE_INVALID_CARTESIAN_ORIENTATION
#endif
#if defined(_WIN32) && defined(TRAJECTORY_ERROR_TYPE_INVALID_CARTESIAN_LINEAR_VELOCITY)
  #undef TRAJECTORY_ERROR_TYPE_INVALID_CARTESIAN_LINEAR_VELOCITY
#endif
#if defined(_WIN32) && defined(TRAJECTORY_ERROR_TYPE_INVALID_CARTESIAN_ANGULAR_VELOCITY)
  #undef TRAJECTORY_ERROR_TYPE_INVALID_CARTESIAN_ANGULAR_VELOCITY
#endif
#if defined(_WIN32) && defined(TRAJECTORY_ERROR_TYPE_INVALID_JOINT_TORQUE)
  #undef TRAJECTORY_ERROR_TYPE_INVALID_JOINT_TORQUE
#endif
#if defined(_WIN32) && defined(TRAJECTORY_ERROR_TYPE_MULTIPLE_WAYPOINT_TYPE_LIST)
  #undef TRAJECTORY_ERROR_TYPE_MULTIPLE_WAYPOINT_TYPE_LIST
#endif
#if defined(_WIN32) && defined(TRAJECTORY_ERROR_TYPE_INITIAL_WAYPOINT_NO_STOP)
  #undef TRAJECTORY_ERROR_TYPE_INITIAL_WAYPOINT_NO_STOP
#endif
#if defined(_WIN32) && defined(TRAJECTORY_ERROR_TYPE_FINAL_WAYPOINT_NO_STOP)
  #undef TRAJECTORY_ERROR_TYPE_FINAL_WAYPOINT_NO_STOP
#endif
#if defined(_WIN32) && defined(TRAJECTORY_ERROR_TYPE_INVALID_BLENDING_RADIUS)
  #undef TRAJECTORY_ERROR_TYPE_INVALID_BLENDING_RADIUS
#endif
#if defined(_WIN32) && defined(TRAJECTORY_ERROR_TYPE_INVALID_REFERENCE_FRAME)
  #undef TRAJECTORY_ERROR_TYPE_INVALID_REFERENCE_FRAME
#endif
#if defined(_WIN32) && defined(TRAJECTORY_ERROR_TYPE_NUMERICAL_ERROR_IMPOSSIBLE_TRAJECTORY)
  #undef TRAJECTORY_ERROR_TYPE_NUMERICAL_ERROR_IMPOSSIBLE_TRAJECTORY
#endif

  enum {
    TRAJECTORY_ERROR_TYPE_UNSPECIFIED = 0u,
    TRAJECTORY_ERROR_TYPE_OUTSIDE_WORKSPACE = 1u,
    TRAJECTORY_ERROR_TYPE_ACTUATOR_COUNT_MISMATCH = 2u,
    TRAJECTORY_ERROR_TYPE_INVALID_DURATION = 3u,
    TRAJECTORY_ERROR_TYPE_JOINT_NO_MOTION = 4u,
    TRAJECTORY_ERROR_TYPE_ZERO_DISTANCE = 4u,
    TRAJECTORY_ERROR_TYPE_INVALID_JOINT_SPEED = 5u,
    TRAJECTORY_ERROR_TYPE_INVALID_SPEED = 5u,
    TRAJECTORY_ERROR_TYPE_LARGE_SPEED = 6u,
    TRAJECTORY_ERROR_TYPE_INVALID_JOINT_ACCELERATION = 7u,
    TRAJECTORY_ERROR_TYPE_INVALID_ACCELERATION = 7u,
    TRAJECTORY_ERROR_TYPE_INVALID_TIME_STEP = 8u,
    TRAJECTORY_ERROR_TYPE_INVALID_TRAJECTORY_SIZE = 9u,
    TRAJECTORY_ERROR_TYPE_LARGE_SIZE = 9u,
    TRAJECTORY_ERROR_TYPE_WRONG_MODE = 10u,
    TRAJECTORY_ERROR_TYPE_INVALID_JOINT_POSITION = 11u,
    TRAJECTORY_ERROR_TYPE_JOINT_POSITION_LIMIT = 11u,
    TRAJECTORY_ERROR_TYPE_FILE_ERROR = 12u,
    TRAJECTORY_ERROR_TYPE_NO_FILE_IN_MEMORY = 13u,
    TRAJECTORY_ERROR_TYPE_INDEX_OUT_OF_TRAJ = 14u,
    TRAJECTORY_ERROR_TYPE_TRAJECTORY_ALREADY_RUNNING = 15u,
    TRAJECTORY_ERROR_TYPE_ALREADY_RUNNING = 15u,
    TRAJECTORY_ERROR_TYPE_WRONG_STARTING_POINT = 16u,
    TRAJECTORY_ERROR_TYPE_CARTESIAN_CANNOT_START = 17u,
    TRAJECTORY_ERROR_TYPE_WRONG_STARTING_SPEED = 18u,
    TRAJECTORY_ERROR_TYPE_INVALID_POSITION = 19u,
    TRAJECTORY_ERROR_TYPE_INVALID_CARTESIAN_POSITION = 20u,
    TRAJECTORY_ERROR_TYPE_INVALID_CARTESIAN_ORIENTATION = 21u,
    TRAJECTORY_ERROR_TYPE_INVALID_CARTESIAN_LINEAR_VELOCITY = 22u,
    TRAJECTORY_ERROR_TYPE_INVALID_CARTESIAN_ANGULAR_VELOCITY = 23u,
    TRAJECTORY_ERROR_TYPE_INVALID_JOINT_TORQUE = 24u,
    TRAJECTORY_ERROR_TYPE_MULTIPLE_WAYPOINT_TYPE_LIST = 25u,
    TRAJECTORY_ERROR_TYPE_INITIAL_WAYPOINT_NO_STOP = 26u,
    TRAJECTORY_ERROR_TYPE_FINAL_WAYPOINT_NO_STOP = 27u,
    TRAJECTORY_ERROR_TYPE_INVALID_BLENDING_RADIUS = 28u,
    TRAJECTORY_ERROR_TYPE_INVALID_REFERENCE_FRAME = 29u,
    TRAJECTORY_ERROR_TYPE_NUMERICAL_ERROR_IMPOSSIBLE_TRAJECTORY = 30u,
  };


  typedef boost::shared_ptr< ::kortex_driver::TrajectoryErrorType_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::TrajectoryErrorType_<ContainerAllocator> const> ConstPtr;

}; // struct TrajectoryErrorType_

typedef ::kortex_driver::TrajectoryErrorType_<std::allocator<void> > TrajectoryErrorType;

typedef boost::shared_ptr< ::kortex_driver::TrajectoryErrorType > TrajectoryErrorTypePtr;
typedef boost::shared_ptr< ::kortex_driver::TrajectoryErrorType const> TrajectoryErrorTypeConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::TrajectoryErrorType_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::TrajectoryErrorType_<ContainerAllocator> >::stream(s, "", v);
return s;
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::TrajectoryErrorType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::TrajectoryErrorType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::TrajectoryErrorType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::TrajectoryErrorType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::TrajectoryErrorType_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::TrajectoryErrorType_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::TrajectoryErrorType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4f3aa449e7cdc70f504c12f27c350f66";
  }

  static const char* value(const ::kortex_driver::TrajectoryErrorType_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4f3aa449e7cdc70fULL;
  static const uint64_t static_value2 = 0x504c12f27c350f66ULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::TrajectoryErrorType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/TrajectoryErrorType";
  }

  static const char* value(const ::kortex_driver::TrajectoryErrorType_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::TrajectoryErrorType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"uint32 TRAJECTORY_ERROR_TYPE_UNSPECIFIED = 0\n"
"\n"
"uint32 TRAJECTORY_ERROR_TYPE_OUTSIDE_WORKSPACE = 1\n"
"\n"
"uint32 TRAJECTORY_ERROR_TYPE_ACTUATOR_COUNT_MISMATCH = 2\n"
"\n"
"uint32 TRAJECTORY_ERROR_TYPE_INVALID_DURATION = 3\n"
"\n"
"uint32 TRAJECTORY_ERROR_TYPE_JOINT_NO_MOTION = 4\n"
"\n"
"uint32 TRAJECTORY_ERROR_TYPE_ZERO_DISTANCE = 4\n"
"\n"
"uint32 TRAJECTORY_ERROR_TYPE_INVALID_JOINT_SPEED = 5\n"
"\n"
"uint32 TRAJECTORY_ERROR_TYPE_INVALID_SPEED = 5\n"
"\n"
"uint32 TRAJECTORY_ERROR_TYPE_LARGE_SPEED = 6\n"
"\n"
"uint32 TRAJECTORY_ERROR_TYPE_INVALID_JOINT_ACCELERATION = 7\n"
"\n"
"uint32 TRAJECTORY_ERROR_TYPE_INVALID_ACCELERATION = 7\n"
"\n"
"uint32 TRAJECTORY_ERROR_TYPE_INVALID_TIME_STEP = 8\n"
"\n"
"uint32 TRAJECTORY_ERROR_TYPE_INVALID_TRAJECTORY_SIZE = 9\n"
"\n"
"uint32 TRAJECTORY_ERROR_TYPE_LARGE_SIZE = 9\n"
"\n"
"uint32 TRAJECTORY_ERROR_TYPE_WRONG_MODE = 10\n"
"\n"
"uint32 TRAJECTORY_ERROR_TYPE_INVALID_JOINT_POSITION = 11\n"
"\n"
"uint32 TRAJECTORY_ERROR_TYPE_JOINT_POSITION_LIMIT = 11\n"
"\n"
"uint32 TRAJECTORY_ERROR_TYPE_FILE_ERROR = 12\n"
"\n"
"uint32 TRAJECTORY_ERROR_TYPE_NO_FILE_IN_MEMORY = 13\n"
"\n"
"uint32 TRAJECTORY_ERROR_TYPE_INDEX_OUT_OF_TRAJ = 14\n"
"\n"
"uint32 TRAJECTORY_ERROR_TYPE_TRAJECTORY_ALREADY_RUNNING = 15\n"
"\n"
"uint32 TRAJECTORY_ERROR_TYPE_ALREADY_RUNNING = 15\n"
"\n"
"uint32 TRAJECTORY_ERROR_TYPE_WRONG_STARTING_POINT = 16\n"
"\n"
"uint32 TRAJECTORY_ERROR_TYPE_CARTESIAN_CANNOT_START = 17\n"
"\n"
"uint32 TRAJECTORY_ERROR_TYPE_WRONG_STARTING_SPEED = 18\n"
"\n"
"uint32 TRAJECTORY_ERROR_TYPE_INVALID_POSITION = 19\n"
"\n"
"uint32 TRAJECTORY_ERROR_TYPE_INVALID_CARTESIAN_POSITION = 20\n"
"\n"
"uint32 TRAJECTORY_ERROR_TYPE_INVALID_CARTESIAN_ORIENTATION = 21\n"
"\n"
"uint32 TRAJECTORY_ERROR_TYPE_INVALID_CARTESIAN_LINEAR_VELOCITY = 22\n"
"\n"
"uint32 TRAJECTORY_ERROR_TYPE_INVALID_CARTESIAN_ANGULAR_VELOCITY = 23\n"
"\n"
"uint32 TRAJECTORY_ERROR_TYPE_INVALID_JOINT_TORQUE = 24\n"
"\n"
"uint32 TRAJECTORY_ERROR_TYPE_MULTIPLE_WAYPOINT_TYPE_LIST = 25\n"
"\n"
"uint32 TRAJECTORY_ERROR_TYPE_INITIAL_WAYPOINT_NO_STOP = 26\n"
"\n"
"uint32 TRAJECTORY_ERROR_TYPE_FINAL_WAYPOINT_NO_STOP = 27\n"
"\n"
"uint32 TRAJECTORY_ERROR_TYPE_INVALID_BLENDING_RADIUS = 28\n"
"\n"
"uint32 TRAJECTORY_ERROR_TYPE_INVALID_REFERENCE_FRAME = 29\n"
"\n"
"uint32 TRAJECTORY_ERROR_TYPE_NUMERICAL_ERROR_IMPOSSIBLE_TRAJECTORY = 30\n"
;
  }

  static const char* value(const ::kortex_driver::TrajectoryErrorType_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::TrajectoryErrorType_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrajectoryErrorType_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::TrajectoryErrorType_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::kortex_driver::TrajectoryErrorType_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_TRAJECTORYERRORTYPE_H

// Generated by gencpp from file kortex_driver/TrajectoryInfoType.msg
// DO NOT EDIT!


#ifndef KORTEX_DRIVER_MESSAGE_TRAJECTORYINFOTYPE_H
#define KORTEX_DRIVER_MESSAGE_TRAJECTORYINFOTYPE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kortex_driver
{
template <class ContainerAllocator>
struct TrajectoryInfoType_
{
  typedef TrajectoryInfoType_<ContainerAllocator> Type;

  TrajectoryInfoType_()
    {
    }
  TrajectoryInfoType_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }





// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(UNSPECIFIED_TRAJECTORY_INFORMATION)
  #undef UNSPECIFIED_TRAJECTORY_INFORMATION
#endif
#if defined(_WIN32) && defined(JOINT_ACCELERATION_LIMIT_REACHED)
  #undef JOINT_ACCELERATION_LIMIT_REACHED
#endif
#if defined(_WIN32) && defined(JOINT_SPEED_LIMIT_REACHED)
  #undef JOINT_SPEED_LIMIT_REACHED
#endif
#if defined(_WIN32) && defined(JOINT_POSITION_LIMIT_REACHED)
  #undef JOINT_POSITION_LIMIT_REACHED
#endif
#if defined(_WIN32) && defined(JOINT_TORQUE_LIMIT_REACHED)
  #undef JOINT_TORQUE_LIMIT_REACHED
#endif
#if defined(_WIN32) && defined(SINGULARITY_REGION)
  #undef SINGULARITY_REGION
#endif
#if defined(_WIN32) && defined(INVERSE_KINEMATIC_FAILED)
  #undef INVERSE_KINEMATIC_FAILED
#endif
#if defined(_WIN32) && defined(CARTESIAN_ACCELERATION_LIMIT_REACHED)
  #undef CARTESIAN_ACCELERATION_LIMIT_REACHED
#endif
#if defined(_WIN32) && defined(CARTESIAN_SPEED_LIMIT_REACHED)
  #undef CARTESIAN_SPEED_LIMIT_REACHED
#endif
#if defined(_WIN32) && defined(CARTESIAN_POSITION_LIMIT_REACHED)
  #undef CARTESIAN_POSITION_LIMIT_REACHED
#endif
#if defined(_WIN32) && defined(CARTESIAN_WRENCH_LIMIT_REACHED)
  #undef CARTESIAN_WRENCH_LIMIT_REACHED
#endif
#if defined(_WIN32) && defined(ENTERING_PROTECTION_ZONE)
  #undef ENTERING_PROTECTION_ZONE
#endif
#if defined(_WIN32) && defined(WAYPOINT_REACHED)
  #undef WAYPOINT_REACHED
#endif
#if defined(_WIN32) && defined(TRAJECTORY_OK)
  #undef TRAJECTORY_OK
#endif

  enum {
    UNSPECIFIED_TRAJECTORY_INFORMATION = 0u,
    JOINT_ACCELERATION_LIMIT_REACHED = 1u,
    JOINT_SPEED_LIMIT_REACHED = 2u,
    JOINT_POSITION_LIMIT_REACHED = 3u,
    JOINT_TORQUE_LIMIT_REACHED = 4u,
    SINGULARITY_REGION = 5u,
    INVERSE_KINEMATIC_FAILED = 6u,
    CARTESIAN_ACCELERATION_LIMIT_REACHED = 7u,
    CARTESIAN_SPEED_LIMIT_REACHED = 8u,
    CARTESIAN_POSITION_LIMIT_REACHED = 9u,
    CARTESIAN_WRENCH_LIMIT_REACHED = 10u,
    ENTERING_PROTECTION_ZONE = 11u,
    WAYPOINT_REACHED = 12u,
    TRAJECTORY_OK = 13u,
  };


  typedef boost::shared_ptr< ::kortex_driver::TrajectoryInfoType_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kortex_driver::TrajectoryInfoType_<ContainerAllocator> const> ConstPtr;

}; // struct TrajectoryInfoType_

typedef ::kortex_driver::TrajectoryInfoType_<std::allocator<void> > TrajectoryInfoType;

typedef boost::shared_ptr< ::kortex_driver::TrajectoryInfoType > TrajectoryInfoTypePtr;
typedef boost::shared_ptr< ::kortex_driver::TrajectoryInfoType const> TrajectoryInfoTypeConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kortex_driver::TrajectoryInfoType_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kortex_driver::TrajectoryInfoType_<ContainerAllocator> >::stream(s, "", v);
return s;
}


} // namespace kortex_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::TrajectoryInfoType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kortex_driver::TrajectoryInfoType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::TrajectoryInfoType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kortex_driver::TrajectoryInfoType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::TrajectoryInfoType_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kortex_driver::TrajectoryInfoType_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kortex_driver::TrajectoryInfoType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8bf652b45448cd88f4d8d2fc90a3634d";
  }

  static const char* value(const ::kortex_driver::TrajectoryInfoType_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8bf652b45448cd88ULL;
  static const uint64_t static_value2 = 0xf4d8d2fc90a3634dULL;
};

template<class ContainerAllocator>
struct DataType< ::kortex_driver::TrajectoryInfoType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kortex_driver/TrajectoryInfoType";
  }

  static const char* value(const ::kortex_driver::TrajectoryInfoType_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kortex_driver::TrajectoryInfoType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"uint32 UNSPECIFIED_TRAJECTORY_INFORMATION = 0\n"
"\n"
"uint32 JOINT_ACCELERATION_LIMIT_REACHED = 1\n"
"\n"
"uint32 JOINT_SPEED_LIMIT_REACHED = 2\n"
"\n"
"uint32 JOINT_POSITION_LIMIT_REACHED = 3\n"
"\n"
"uint32 JOINT_TORQUE_LIMIT_REACHED = 4\n"
"\n"
"uint32 SINGULARITY_REGION = 5\n"
"\n"
"uint32 INVERSE_KINEMATIC_FAILED = 6\n"
"\n"
"uint32 CARTESIAN_ACCELERATION_LIMIT_REACHED = 7\n"
"\n"
"uint32 CARTESIAN_SPEED_LIMIT_REACHED = 8\n"
"\n"
"uint32 CARTESIAN_POSITION_LIMIT_REACHED = 9\n"
"\n"
"uint32 CARTESIAN_WRENCH_LIMIT_REACHED = 10\n"
"\n"
"uint32 ENTERING_PROTECTION_ZONE = 11\n"
"\n"
"uint32 WAYPOINT_REACHED = 12\n"
"\n"
"uint32 TRAJECTORY_OK = 13\n"
;
  }

  static const char* value(const ::kortex_driver::TrajectoryInfoType_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kortex_driver::TrajectoryInfoType_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrajectoryInfoType_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kortex_driver::TrajectoryInfoType_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::kortex_driver::TrajectoryInfoType_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // KORTEX_DRIVER_MESSAGE_TRAJECTORYINFOTYPE_H

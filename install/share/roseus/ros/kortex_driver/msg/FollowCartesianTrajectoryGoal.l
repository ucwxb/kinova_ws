;; Auto-generated. Do not edit!


(when (boundp 'kortex_driver::FollowCartesianTrajectoryGoal)
  (if (not (find-package "KORTEX_DRIVER"))
    (make-package "KORTEX_DRIVER"))
  (shadow 'FollowCartesianTrajectoryGoal (find-package "KORTEX_DRIVER")))
(unless (find-package "KORTEX_DRIVER::FOLLOWCARTESIANTRAJECTORYGOAL")
  (make-package "KORTEX_DRIVER::FOLLOWCARTESIANTRAJECTORYGOAL"))

(in-package "ROS")
;;//! \htmlinclude FollowCartesianTrajectoryGoal.msg.html


(defclass kortex_driver::FollowCartesianTrajectoryGoal
  :super ros::object
  :slots (_trajectory _goal_time_tolerance _use_optimal_blending ))

(defmethod kortex_driver::FollowCartesianTrajectoryGoal
  (:init
   (&key
    ((:trajectory __trajectory) (let (r) (dotimes (i 0) (push (instance kortex_driver::CartesianWaypoint :init) r)) r))
    ((:goal_time_tolerance __goal_time_tolerance) (instance ros::time :init))
    ((:use_optimal_blending __use_optimal_blending) nil)
    )
   (send-super :init)
   (setq _trajectory __trajectory)
   (setq _goal_time_tolerance __goal_time_tolerance)
   (setq _use_optimal_blending __use_optimal_blending)
   self)
  (:trajectory
   (&rest __trajectory)
   (if (keywordp (car __trajectory))
       (send* _trajectory __trajectory)
     (progn
       (if __trajectory (setq _trajectory (car __trajectory)))
       _trajectory)))
  (:goal_time_tolerance
   (&optional __goal_time_tolerance)
   (if __goal_time_tolerance (setq _goal_time_tolerance __goal_time_tolerance)) _goal_time_tolerance)
  (:use_optimal_blending
   (&optional __use_optimal_blending)
   (if __use_optimal_blending (setq _use_optimal_blending __use_optimal_blending)) _use_optimal_blending)
  (:serialization-length
   ()
   (+
    ;; kortex_driver/CartesianWaypoint[] _trajectory
    (apply #'+ (send-all _trajectory :serialization-length)) 4
    ;; duration _goal_time_tolerance
    8
    ;; bool _use_optimal_blending
    1
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; kortex_driver/CartesianWaypoint[] _trajectory
     (write-long (length _trajectory) s)
     (dolist (elem _trajectory)
       (send elem :serialize s)
       )
     ;; duration _goal_time_tolerance
       (write-long (send _goal_time_tolerance :sec) s) (write-long (send _goal_time_tolerance :nsec) s)
     ;; bool _use_optimal_blending
       (if _use_optimal_blending (write-byte -1 s) (write-byte 0 s))
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; kortex_driver/CartesianWaypoint[] _trajectory
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _trajectory (let (r) (dotimes (i n) (push (instance kortex_driver::CartesianWaypoint :init) r)) r))
     (dolist (elem- _trajectory)
     (send elem- :deserialize buf ptr-) (incf ptr- (send elem- :serialization-length))
     ))
   ;; duration _goal_time_tolerance
     (send _goal_time_tolerance :sec (sys::peek buf ptr- :integer)) (incf ptr- 4)  (send _goal_time_tolerance :nsec (sys::peek buf ptr- :integer)) (incf ptr- 4)
   ;; bool _use_optimal_blending
     (setq _use_optimal_blending (not (= 0 (sys::peek buf ptr- :char)))) (incf ptr- 1)
   ;;
   self)
  )

(setf (get kortex_driver::FollowCartesianTrajectoryGoal :md5sum-) "df06af45264ea735bb204bc1057fde50")
(setf (get kortex_driver::FollowCartesianTrajectoryGoal :datatype-) "kortex_driver/FollowCartesianTrajectoryGoal")
(setf (get kortex_driver::FollowCartesianTrajectoryGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#The trajectory to follow
CartesianWaypoint[] trajectory
duration goal_time_tolerance
bool use_optimal_blending

================================================================================
MSG: kortex_driver/CartesianWaypoint

Pose pose
uint32 reference_frame
float32 maximum_linear_velocity
float32 maximum_angular_velocity
float32 blending_radius
================================================================================
MSG: kortex_driver/Pose

float32 x
float32 y
float32 z
float32 theta_x
float32 theta_y
float32 theta_z
")



(provide :kortex_driver/FollowCartesianTrajectoryGoal "df06af45264ea735bb204bc1057fde50")



// Auto-generated. Do not edit!

// (in-package kortex_driver.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let CartesianWaypoint = require('./CartesianWaypoint.js');

//-----------------------------------------------------------

class FollowCartesianTrajectoryGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.trajectory = null;
      this.goal_time_tolerance = null;
      this.use_optimal_blending = null;
    }
    else {
      if (initObj.hasOwnProperty('trajectory')) {
        this.trajectory = initObj.trajectory
      }
      else {
        this.trajectory = [];
      }
      if (initObj.hasOwnProperty('goal_time_tolerance')) {
        this.goal_time_tolerance = initObj.goal_time_tolerance
      }
      else {
        this.goal_time_tolerance = {secs: 0, nsecs: 0};
      }
      if (initObj.hasOwnProperty('use_optimal_blending')) {
        this.use_optimal_blending = initObj.use_optimal_blending
      }
      else {
        this.use_optimal_blending = false;
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type FollowCartesianTrajectoryGoal
    // Serialize message field [trajectory]
    // Serialize the length for message field [trajectory]
    bufferOffset = _serializer.uint32(obj.trajectory.length, buffer, bufferOffset);
    obj.trajectory.forEach((val) => {
      bufferOffset = CartesianWaypoint.serialize(val, buffer, bufferOffset);
    });
    // Serialize message field [goal_time_tolerance]
    bufferOffset = _serializer.duration(obj.goal_time_tolerance, buffer, bufferOffset);
    // Serialize message field [use_optimal_blending]
    bufferOffset = _serializer.bool(obj.use_optimal_blending, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type FollowCartesianTrajectoryGoal
    let len;
    let data = new FollowCartesianTrajectoryGoal(null);
    // Deserialize message field [trajectory]
    // Deserialize array length for message field [trajectory]
    len = _deserializer.uint32(buffer, bufferOffset);
    data.trajectory = new Array(len);
    for (let i = 0; i < len; ++i) {
      data.trajectory[i] = CartesianWaypoint.deserialize(buffer, bufferOffset)
    }
    // Deserialize message field [goal_time_tolerance]
    data.goal_time_tolerance = _deserializer.duration(buffer, bufferOffset);
    // Deserialize message field [use_optimal_blending]
    data.use_optimal_blending = _deserializer.bool(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += 40 * object.trajectory.length;
    return length + 13;
  }

  static datatype() {
    // Returns string type for a message object
    return 'kortex_driver/FollowCartesianTrajectoryGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'df06af45264ea735bb204bc1057fde50';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    #The trajectory to follow
    CartesianWaypoint[] trajectory
    duration goal_time_tolerance
    bool use_optimal_blending
    
    ================================================================================
    MSG: kortex_driver/CartesianWaypoint
    
    Pose pose
    uint32 reference_frame
    float32 maximum_linear_velocity
    float32 maximum_angular_velocity
    float32 blending_radius
    ================================================================================
    MSG: kortex_driver/Pose
    
    float32 x
    float32 y
    float32 z
    float32 theta_x
    float32 theta_y
    float32 theta_z
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new FollowCartesianTrajectoryGoal(null);
    if (msg.trajectory !== undefined) {
      resolved.trajectory = new Array(msg.trajectory.length);
      for (let i = 0; i < resolved.trajectory.length; ++i) {
        resolved.trajectory[i] = CartesianWaypoint.Resolve(msg.trajectory[i]);
      }
    }
    else {
      resolved.trajectory = []
    }

    if (msg.goal_time_tolerance !== undefined) {
      resolved.goal_time_tolerance = msg.goal_time_tolerance;
    }
    else {
      resolved.goal_time_tolerance = {secs: 0, nsecs: 0}
    }

    if (msg.use_optimal_blending !== undefined) {
      resolved.use_optimal_blending = msg.use_optimal_blending;
    }
    else {
      resolved.use_optimal_blending = false
    }

    return resolved;
    }
};

module.exports = FollowCartesianTrajectoryGoal;
